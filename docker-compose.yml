version: '3.8'

services:
  # PostgreSQL with pgvector extension (optional - can use Supabase instead)
  postgres:
    image: ankane/pgvector:latest
    container_name: rag-postgres
    environment:
      POSTGRES_DB: rag_knowledge_hub
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # FastAPI Backend
  backend:
    build:
      context: ./apps/backend
      dockerfile: Dockerfile
    container_name: rag-backend
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/rag_knowledge_hub
      COHERE_API_KEY: ${COHERE_API_KEY}
      GROQ_API_KEY: ${GROQ_API_KEY}
      SUPABASE_JWT_SECRET: ${SUPABASE_JWT_SECRET}
      CORS_ORIGINS: http://localhost:3000
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./apps/backend:/app
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

volumes:
  postgres_data:

# Usage:
# 1. Copy .env.example to .env and fill in your API keys
# 2. Run: docker-compose up
# 3. Backend will be available at http://localhost:8000
# 4. Frontend runs separately: cd apps/web && npm run dev
#
# Note: Workers run separately (not included in docker-compose)
# Run manually: cd workers && python ingest_notion.py --notion-db-id <id>